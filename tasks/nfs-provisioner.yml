---
- name: Deploy NFS provisioner
  when: not delete_deployment|bool
  block:
    - name: Ensure the object configs directory {{ openshift_object_configs_files_dir }} exists
      file:
        path: "{{ openshift_object_configs_files_dir }}"
        state: directory
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
      tags: [ openshift_registry, nfs_provisioner_configs ]

    - name: Create {{ nfs_provisioner_rbac_object_file }}
      template:
        src: templates/nfs-provisioner-rbac.yaml.j2
        dest:  "{{ nfs_provisioner_rbac_object_file }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: 0666
      tags: [ nfs_provisioner, nfs_provisioner_configs ]

    - name: Create {{ nfs_provisioner_deployment_file }}
      template:
        src: templates/nfs-provisioner-deployment.yaml.j2
        dest: "{{ nfs_provisioner_deployment_file }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: 0666
      tags: [ nfs_provisioner, nfs_provisioner_configs ]

    - name: Create {{ nfs_provisioner_sc_object_file }}
      template:
        src: templates/nfs-provisioner-sc.yaml.j2
        dest: "{{ nfs_provisioner_sc_object_file }}"
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: 0666
      tags: [ nfs_provisioner, nfs_provisioner_configs ]

    - name: Create or switch to project {{ nfs_provisioner_namespace }}
      shell: |
        if {{ oc_cmd }} new-project {{ nfs_provisioner_namespace }}
        then
            {{ oc_cmd }} project {{ nfs_provisioner_namespace }}
            echo "Project {{ nfs_provisioner_namespace }} created"
        else
            {{ oc_cmd }} project {{ nfs_provisioner_namespace }}
        fi
      register: _nfs_project
      changed_when: '"AlreadyExists" | string not in _nfs_project.stderr'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      tags: [ nfs_provisioner ]

    - name: Apply the NFS provisioner client RBAC - {{ nfs_provisioner_rbac_object_file }}
      shell: |
        {{ oc_cmd }} apply -f {{ nfs_provisioner_rbac_object_file }}
      register: rbac_result
      changed_when: '"unchanged" | string not in rbac_result.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      tags: [ nfs_provisioner ]

    - name: Configure service account privlages for nfs-client-provisioner
      vars:
        adm_args: "adm policy add-scc-to-user hostmount-anyuid system:serviceaccount"
      shell: |
        if {{ oc_cmd }} {{ adm_args }}:{{ nfs_provisioner_namespace }}:{{ nfs_provisioner_namespace }}
        then
            echo "Policy created"
        fi
      register: service_account_result
      changed_when: '"Policy created" | string not in service_account_result.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      tags: [ nfs_provisioner ]

    - name: Apply the NFS provisioner client StorageClass {{ nfs_provisioner_sc_object_file }}
      command: "{{ oc_cmd }} apply -f {{ nfs_provisioner_sc_object_file }}"
      register: storage_class_result
      changed_when: '"unchanged" | string not in storage_class_result.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      tags: [ nfs_provisioner ]

    - name: The the StorageClass {{ nfs_provisioner_sc_name }} as the default
      shell: |
        if ! {{ oc_cmd }} annotate {{ annotate_args }}='{{ set_default_storage_class }}'
        then
            echo "NoChange"
        fi
      register: set_default_storage_class_result
      changed_when: '"NoChange" | string not in set_default_storage_class_result.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      when: set_default_storage_class|bool
      tags: [ nfs_provisioner ]

    - name: Apply the NFS provisioner client deployment config
      command: "{{ oc_cmd }} apply -f {{ nfs_provisioner_deployment_file }} -n {{     nfs_provisioner_namespace }}"
      register: deployment_result
      changed_when: '"unchanged" | string not in deployment_result.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      tags: [ nfs_provisioner ]



## TESTING
## oc create -f deploy/test-claim.yaml -f deploy/test-pod.yaml
## oc get pods -n nfs-provisioner

- name: Switch back to default project
  command: "{{ oc_cmd }} project default"
  register: default_result
  changed_when: False
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
  tags: [ nfs_provisioner ]

- name: Remove NFS provisioner
  when: delete_deployment|bool
  block:
    - name: Delete rbac for NFS Provisioner
      command: "{{ oc_cmd }} delete -f {{ nfs_provisioner_rbac_object_file }}"
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      register: rbac_result
      ignore_errors: yes

    - name: Delete nfs-storage storage class
      command: "{{ oc_cmd }} delete -f {{ nfs_provisioner_sc_object_file }}"
      register: storage_class_result
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      ignore_errors: yes

    - name: delete nfs-provsioner deployment
      shell: |
         {{ oc_cmd }} delete all --selector app={{ nfs_provisioner_namespace }}
         {{ oc_cmd }} delete project {{ nfs_provisioner_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_dir }}/auth/kubeconfig"
      ignore_errors: yes
